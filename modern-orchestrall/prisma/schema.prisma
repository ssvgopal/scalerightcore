// This file contains the Prisma schema for the modern Orchestrall platform
// Run `npx prisma generate` after making changes

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  tier        String   @default("starter") // starter, professional, enterprise
  status      String   @default("active") // active, suspended, cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  teams       Team[]
  featureFlags FeatureFlag[]
  apiKeys     ApiKey[]
  plugins     OrganizationPlugin[]
  workflows   Workflow[]
  agents      Agent[]
  auditLogs   AuditLog[]
  products    Product[]
  inventoryItems InventoryItem[]
  locations   Location[]
  orders      Order[]
  customers   Customer[]
  farmerProfiles FarmerProfile[]
  farmerTransactions FarmerTransaction[]
  storePerformance StorePerformance[]
  paymentIntents PaymentIntent[]
  refunds Refund[]
  leads Lead[]
  
  // New client-specific relations
  voiceCalls  VoiceCall[]
  stories     Story[]
  storyTemplates StoryTemplate[]
  stores      Store[]
  tenantConfig TenantConfig?
  
  // Real-time features
  webSocketConnections WebSocketConnection[]
  realTimeEvents RealTimeEvent[]
  pushSubscriptions PushSubscription[]
  payments Payment[]
  subscriptions Subscription[]
  notificationPreferences NotificationPreference[]
  
  // Client onboarding relations
  onboardingSessions OnboardingSession[]
  farmerAssociations FarmerAssociation[]
  cropTypes CropType[]
  weatherConfigs WeatherConfig[]
  marketConfigs MarketConfig[]
  voiceConfigs VoiceConfig[]
  paymentConfigs PaymentConfig[]
  notificationConfigs NotificationConfig[]
  productCategories ProductCategory[]
  sales Sale[]
  staff Staff[]
  staffRoles StaffRole[]
  posConfigs PosConfig[]
  customerConfigs CustomerConfig[]
  analyticsConfigs AnalyticsConfig[]
  grafanaDashboards GrafanaDashboard[]
  alertRules AlertRule[]
  notificationChannelConfigs NotificationChannelConfig[]
  assets Asset[]

  @@map("organizations")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?
  avatar         String?
  password       String?  // Optional for SSO users
  status         String   @default("active")
  lastLoginAt    DateTime?
  preferredLanguage String? @default("en")
  timezone       String? @default("UTC")
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  teams          TeamMembership[]
  apiKeys        ApiKey[]
  authProviders  UserAuthProvider[]
  auditLogs      AuditLog[]
  createdWorkflows Workflow[]
  createdAgents  Agent[]
  
  // New client-specific relations
  stories        Story[]
  managedStores  Store[]
  
  // RBAC relations
  roles          UserRole[]
  
  // Real-time features
  webSocketConnections WebSocketConnection[]
  realTimeEvents RealTimeEvent[]
  pushSubscriptions PushSubscription[]
  notificationPreferences NotificationPreference[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("users")
}

model Team {
  id             String   @id @default(cuid())
  name           String
  description    String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  members        TeamMembership[]
  workflows      Workflow[]
  agents         Agent[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("teams")
}

model TeamMembership {
  id       String @id @default(cuid())
  userId   String
  teamId   String
  role     String @default("member") // member, admin, owner
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team     Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  joinedAt DateTime @default(now())

  @@unique([userId, teamId])
  @@map("team_memberships")
}

model FeatureFlag {
  id             String   @id @default(cuid())
  name           String
  key            String   @unique // e.g., "crm-integration", "agent-runtime"
  description    String?
  enabled        Boolean  @default(false)
  percentage     Int      @default(100) // Rollout percentage (0-100)
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Flag-specific configuration
  config         Json     @default("{}")

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("feature_flags")
}

model ApiKey {
  id             String   @id @default(cuid())
  name           String
  key            String   @unique
  permissions    String[] // Array of permission strings
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Usage tracking
  lastUsedAt     DateTime?
  usageCount     Int      @default(0)
  rateLimit      Int      @default(1000) // Requests per hour

  expiresAt      DateTime?
  revoked        Boolean  @default(false)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("api_keys")
}

model UserAuthProvider {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider    String   // google, github, microsoft, etc.
  providerId  String   // ID from the provider
  profile     Json     @default("{}") // Provider profile data

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([provider, providerId])
  @@map("user_auth_providers")
}

model OrganizationPlugin {
  id             String   @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  pluginId       String   // Reference to plugin registry
  name           String
  version        String
  config         Json     @default("{}")
  enabled        Boolean  @default(true)
  status         String   @default("installed") // installed, running, error

  installedAt    DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("organization_plugins")
}

model Workflow {
  id             String   @id @default(cuid())
  name           String
  description    String?
  definition     Json     // Workflow definition (LangGraph, BPMN, etc.)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  teamId         String?
  team           Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdById    String
  createdBy      User     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  // Execution tracking
  executions     WorkflowExecution[]

  status         String   @default("draft") // draft, active, inactive
  tags           String[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("workflows")
}

model WorkflowExecution {
  id         String   @id @default(cuid())
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  // Execution context
  input      Json     @default("{}")
  output     Json     @default("{}")
  status     String   @default("running") // running, completed, failed, cancelled
  error      String?

  // Timing
  startedAt  DateTime @default(now())
  completedAt DateTime?

  // Metadata
  triggeredBy String? // user ID or system
  metadata   Json     @default("{}")

  @@map("workflow_executions")
}

model Agent {
  id             String   @id @default(cuid())
  name           String
  description    String?
  type           String   // autonomous, assistant, specialist, coordinator
  framework      String   // openai, langgraph, crewai, autogen, custom
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  teamId         String?
  team           Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdById    String
  createdBy      User     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  // Agent configuration
  config         Json     @default("{}")
  capabilities   String[] // List of capabilities/tools
  memory         Json     @default("{}") // Memory configuration

  // Runtime state
  status         String   @default("inactive") // inactive, active, error
  lastActiveAt   DateTime?

  // Relations
  conversations  AgentConversation[]
  executions     AgentExecution[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("agents")
}

model AgentConversation {
  id          String   @id @default(cuid())
  agentId     String
  agent       Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  // Conversation context
  conversationId String
  userId        String?
  organizationId String

  // Messages
  messages    Json     @default("[]") // Array of message objects

  // Metadata
  startedAt   DateTime @default(now())
  endedAt     DateTime?
  metadata    Json     @default("{}")

  @@map("agent_conversations")
}

model AgentExecution {
  id         String   @id @default(cuid())
  agentId    String
  agent      Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  // Execution context
  input      Json     @default("{}")
  output     Json     @default("{}")
  status     String   @default("running") // running, completed, failed
  error      String?

  // Timing and performance
  startedAt  DateTime @default(now())
  completedAt DateTime?
  duration   Int?     // Execution time in milliseconds

  // Metadata
  triggeredBy String? // user ID or system
  metadata   Json     @default("{}")

  @@map("agent_executions")
}

model AuditLog {
  id             String   @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Audit details
  action         String   // create, update, delete, login, etc.
  resource       String   // users, organizations, workflows, etc.
  resourceId     String?  // ID of the affected resource
  details        Json     @default("{}") // Additional context

  // Tracking
  ipAddress      String?
  userAgent      String?
  sessionId      String?

  createdAt      DateTime @default(now())

  @@index([organizationId, createdAt])
  @@index([userId, createdAt])
  @@index([action, resource])
  @@map("audit_logs")
}

// ===== RETAIL PLATFORM MODELS =====

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  sku         String   @unique
  attributes  Json     @default("{}")  // Client-specific: fabricType, farmerId, etc.
  metadata    Json     @default("{}")  // Plugin data
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  inventoryItems InventoryItem[]
  orderItems  OrderItem[]
  transfers   InventoryTransfer[]
  reorderRules ReorderRule[]
  category    ProductCategory? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("products")
}

model InventoryItem {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  locationId String
  location   Location @relation(fields: [locationId], references: [id])
  storeId    String?
  store      Store?   @relation(fields: [storeId], references: [id])
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  quantity   Int      @default(0)
  reserved   Int      @default(0)
  updatedAt  DateTime @updatedAt
  @@unique([productId, locationId])
  @@map("inventory_items")
}

model Location {
  id          String @id @default(cuid())
  name        String
  type        String  // store, warehouse, farm
  address     String?
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  inventoryItems InventoryItem[]
  storePerformance StorePerformance[]
  @@map("locations")
}

model Order {
  id          String @id @default(cuid())
  orderNumber String @unique
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id])
  status      String  // pending, confirmed, shipped, delivered, cancelled
  total       Decimal @db.Decimal(10, 2)
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  items       OrderItem[]
  paymentIntents PaymentIntent[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  @@map("order_items")
}

model Customer {
  id          String @id @default(cuid())
  email       String
  name        String
  phone       String?
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  orders      Order[]
  sales       Sale[]
  @@map("customers")
}

model FarmerProfile {
  id          String @id @default(cuid())
  name        String
  farmLocation String
  region      String
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  transactions FarmerTransaction[]
  voiceCalls  VoiceCall[]
  payments Payment[]
  subscriptions Subscription[]
  crops       Crop[]
  farmerAssociation FarmerAssociation? @relation(fields: [farmerAssociationId], references: [id])
  farmerAssociationId String?
  
  // Enhanced farmer profile fields
  phone       String?
  email       String?
  aadhaarNumber String?
  panNumber   String?
  bankAccountNumber String?
  ifscCode    String?
  verificationStatus String @default("pending") // pending, verified, rejected
  
  // New agricultural relations
  documents   FarmerDocument[]
  landRecords LandRecord[]
  creditScores CreditScore[]
  loanApplications LoanApplication[]
  insuranceClaims InsuranceClaim[]
  insurancePolicies InsurancePolicy[]
  sellingRecommendations SellingRecommendation[]
  weatherAlerts WeatherAlert[]
  marketAlerts MarketAlert[]
  verifications FarmerVerification[]
  
  @@map("farmer_profiles")
}

model FarmerTransaction {
  id          String  @id @default(cuid())
  farmerId    String
  farmer      FarmerProfile @relation(fields: [farmerId], references: [id])
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  orderId     String?
  amount      Decimal @db.Decimal(10, 2)
  profitShare Decimal @db.Decimal(5, 2)  // Percentage
  status      String  // pending, paid
  createdAt   DateTime @default(now())
  @@map("farmer_transactions")
}

model StorePerformance {
  id         String  @id @default(cuid())
  locationId String
  location   Location @relation(fields: [locationId], references: [id])
  storeId    String?
  store      Store?   @relation(fields: [storeId], references: [id])
  date       DateTime
  sales      Decimal @db.Decimal(10, 2)
  orders     Int
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  @@unique([locationId, date])
  @@map("store_performance")
}

// ===== PAYMENT MODELS =====

model PaymentIntent {
  id                String   @id @default(cuid())
  razorpayOrderId   String?  @unique
  razorpayPaymentId String? @unique
  orderId           String
  order             Order    @relation(fields: [orderId], references: [id])
  amount            Decimal  @db.Decimal(10, 2)
  currency          String   @default("INR")
  status            String   // created, captured, failed, cancelled
  capturedAt        DateTime?
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id])
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  @@map("payment_intents")
}

model Refund {
  id                String   @id @default(cuid())
  razorpayRefundId  String   @unique
  paymentId         String
  amount            Decimal  @db.Decimal(10, 2)
  currency          String   @default("INR")
  status            RefundStatus @default(PENDING)
  reason            String?
  processedAt       DateTime?
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id])
  payment           Payment? @relation(fields: [paymentId], references: [id])
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  @@map("refunds")
}

// ===== CRM MODELS =====

model Lead {
  id             String   @id @default(cuid())
  zohoId         String?  @unique
  firstName      String
  lastName       String
  email          String
  phone          String?
  company        String?
  source         String?
  industry       String?
  status         String?
  description    String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  @@map("leads")
}

// ===== VOICE INTEGRATION MODELS =====

model VoiceCall {
  id          String   @id @default(cuid())
  sessionId   String   @unique
  farmerId    String?
  farmer      FarmerProfile? @relation(fields: [farmerId], references: [id])
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  language    String
  duration    Int      // milliseconds
  status      String   // processing, completed, failed
  transcription String?
  command     String?
  response    String?
  audioDataSize Int?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  analytics   VoiceAnalytics[]
  @@map("voice_calls")
}

model VoiceAnalytics {
  id          String   @id @default(cuid())
  callId      String
  call        VoiceCall @relation(fields: [callId], references: [id])
  sentiment   String?  // positive, negative, neutral
  topics      String[] // extracted topics
  confidence  Float    // AI confidence score
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  @@map("voice_analytics")
}

// ===== STORYTELLING CMS MODELS =====

model Story {
  id          String   @id @default(cuid())
  title       String
  content     String
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  templateId  String?
  template    StoryTemplate? @relation(fields: [templateId], references: [id])
  status      String   // draft, review, published
  publishedAt DateTime?
  views       Int      @default(0)
  likes       Int      @default(0)
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  media       StoryMedia[]
  analytics   StoryAnalytics[]
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("stories")
}

model StoryTemplate {
  id          String   @id @default(cuid())
  name        String
  description String
  content     String   // template content
  category    String   // crop, success, tips
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  stories     Story[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("story_templates")
}

model StoryMedia {
  id          String   @id @default(cuid())
  storyId     String
  story       Story    @relation(fields: [storyId], references: [id])
  type        String   // image, video, audio
  url         String
  thumbnail   String?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  @@map("story_media")
}

model StoryAnalytics {
  id          String   @id @default(cuid())
  storyId     String
  story       Story    @relation(fields: [storyId], references: [id])
  event       String   // view, like, share, comment
  userId      String?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  @@map("story_analytics")
}

// ===== FARMER DASHBOARD MODELS =====

model Crop {
  id          String   @id @default(cuid())
  farmerId    String
  farmer      FarmerProfile @relation(fields: [farmerId], references: [id])
  name        String
  variety     String?
  plantingDate DateTime
  harvestDate DateTime?
  yield       Decimal? @db.Decimal(10, 2)
  status      String   // planted, growing, harvested
  metadata    Json     @default("{}")
  
  // New agricultural relations
  healthRecords CropHealthRecord[]
  yieldPredictions YieldPrediction[]
  cropType     CropType? @relation(fields: [cropTypeId], references: [id])
  cropTypeId   String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("crops")
}

model WeatherData {
  id          String   @id @default(cuid())
  location    String
  date        DateTime
  temperature Float
  humidity    Float
  rainfall    Float
  windSpeed   Float
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  @@map("weather_data")
}

model MarketPrice {
  id          String   @id @default(cuid())
  commodity   String
  price       Decimal  @db.Decimal(10, 2)
  unit        String   // kg, quintal, ton
  location    String
  date        DateTime
  source      String
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  @@map("market_prices")
}

// ===== MULTI-STORE INVENTORY MODELS =====

model Store {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  pincode     String
  managerId   String?
  manager     User?    @relation(fields: [managerId], references: [id])
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  inventory   InventoryItem[]
  transfersFrom InventoryTransfer[] @relation("TransferFrom")
  transfersTo InventoryTransfer[] @relation("TransferTo")
  performance StorePerformance[]
  reorderRules ReorderRule[]
  sales       Sale[]
  staff       Staff[]
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("stores")
}

model InventoryTransfer {
  id          String   @id @default(cuid())
  fromStoreId String
  fromStore   Store    @relation("TransferFrom", fields: [fromStoreId], references: [id])
  toStoreId   String
  toStore     Store    @relation("TransferTo", fields: [toStoreId], references: [id])
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Int
  status      String   // pending, in-transit, completed
  requestedBy String
  approvedBy  String?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("inventory_transfers")
}

model ReorderRule {
  id          String   @id @default(cuid())
  storeId     String
  store       Store    @relation(fields: [storeId], references: [id])
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  minQuantity Int
  maxQuantity Int
  isActive    Boolean  @default(true)
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("reorder_rules")
}

// ===== AGRICULTURAL MODELS =====

model FarmerDocument {
  id          String   @id @default(cuid())
  farmerId    String
  farmer      FarmerProfile @relation(fields: [farmerId], references: [id])
  documentType String  // aadhaar, pan, land_document, bank_passbook
  documentNumber String?
  documentUrl String?
  status      String  @default("pending") // pending, verified, rejected
  verifiedAt  DateTime?
  verifiedBy  String?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("farmer_documents")
}

model LandRecord {
  id          String   @id @default(cuid())
  farmerId    String
  farmer      FarmerProfile @relation(fields: [farmerId], references: [id])
  surveyNumber String
  area        Decimal  @db.Decimal(10, 2) // acres
  soilType    String   // clay, sandy, loamy, black
  irrigationType String // borewell, canal, rainfed
  boundaries  Json     @default("{}") // GPS coordinates
  ownershipType String  // owned, leased, shared
  leaseExpiry DateTime?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("land_records")
}

model CropHealthRecord {
  id          String   @id @default(cuid())
  cropId      String
  crop        Crop     @relation(fields: [cropId], references: [id])
  healthScore Int      // 0-100
  diseaseDetected String[] // array of disease names
  pestDetected String[] // array of pest names
  nutrientDeficiency String[] // array of nutrient names
  recommendations Json @default("{}") // AI recommendations
  images      String[] // URLs of crop images
  assessedBy  String?  // user ID or system
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  @@map("crop_health_records")
}

model YieldPrediction {
  id          String   @id @default(cuid())
  cropId      String
  crop        Crop     @relation(fields: [cropId], references: [id])
  predictedYield Decimal @db.Decimal(10, 2)
  confidence  Float    // 0-1 confidence score
  factors     Json     @default("{}") // weather, soil, management factors
  location    String
  cropType    String
  predictedAt DateTime @default(now())
  metadata    Json     @default("{}")
  @@map("yield_predictions")
}

model CreditScore {
  id          String   @id @default(cuid())
  farmerId    String
  farmer      FarmerProfile @relation(fields: [farmerId], references: [id])
  score       Int      // 0-100 credit score
  factors     Json     @default("{}") // payment history, loan history, etc.
  calculatedAt DateTime @default(now())
  validUntil  DateTime
  metadata    Json     @default("{}")
  @@map("credit_scores")
}

model LoanApplication {
  id          String   @id @default(cuid())
  farmerId    String
  farmer      FarmerProfile @relation(fields: [farmerId], references: [id])
  amount      Decimal  @db.Decimal(10, 2)
  purpose     String   // crop_cultivation, equipment, emergency
  tenure      Int      // months
  interestRate Decimal @db.Decimal(5, 2)
  status      String   @default("pending") // pending, approved, rejected, disbursed, completed
  appliedAt   DateTime @default(now())
  approvedAt  DateTime?
  disbursedAt DateTime?
  completedAt DateTime?
  approvedBy  String?
  metadata    Json     @default("{}")
  @@map("loan_applications")
}

model InsuranceClaim {
  id          String   @id @default(cuid())
  farmerId    String
  farmer      FarmerProfile @relation(fields: [farmerId], references: [id])
  policyId    String?
  policy      InsurancePolicy? @relation(fields: [policyId], references: [id])
  damageType  String   // drought, flood, pest, disease, hail, fire
  damagePercentage Float // 0-100
  damageArea  Decimal  @db.Decimal(10, 2) // acres
  claimAmount Decimal  @db.Decimal(10, 2)
  status      String   @default("filed") // filed, under_review, approved, rejected, paid
  assessmentScore Float? // 0-100 automated assessment score
  confidence  Float?   // 0-1 confidence in assessment
  filedAt     DateTime @default(now())
  assessedAt  DateTime?
  approvedAt  DateTime?
  paidAt      DateTime?
  metadata    Json     @default("{}")
  @@map("insurance_claims")
}

model InsurancePolicy {
  id          String   @id @default(cuid())
  farmerId    String
  farmer      FarmerProfile @relation(fields: [farmerId], references: [id])
  policyNumber String  @unique
  cropType    String
  coverageArea Decimal @db.Decimal(10, 2) // acres
  sumInsured  Decimal  @db.Decimal(10, 2)
  premium     Decimal  @db.Decimal(10, 2)
  startDate   DateTime
  endDate     DateTime
  status      String   @default("active") // active, expired, cancelled
  claims      InsuranceClaim[]
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("insurance_policies")
}

model SellingRecommendation {
  id          String   @id @default(cuid())
  farmerId    String
  farmer      FarmerProfile @relation(fields: [farmerId], references: [id])
  cropType    String
  variety     String?
  quantity    Decimal  @db.Decimal(10, 2)
  recommendedPrice Decimal @db.Decimal(10, 2)
  market      String   // recommended market
  timing      String   // best time to sell
  reasoning   String   // AI reasoning for recommendation
  confidence  Float    // 0-1 confidence score
  validUntil  DateTime
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  @@map("selling_recommendations")
}

model WeatherAlert {
  id          String   @id @default(cuid())
  farmerId    String?
  farmer      FarmerProfile? @relation(fields: [farmerId], references: [id])
  location    String
  alertType   String   // heavy_rain, drought, storm, frost, heat_wave
  severity    String   // low, medium, high, critical
  message     String
  validFrom   DateTime
  validUntil  DateTime
  status      String   @default("active") // active, expired, acknowledged
  acknowledgedAt DateTime?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  @@map("weather_alerts")
}

model MarketAlert {
  id          String   @id @default(cuid())
  farmerId    String?
  farmer      FarmerProfile? @relation(fields: [farmerId], references: [id])
  cropType    String
  alertType   String   // price_drop, price_spike, demand_increase, supply_shortage
  severity    String   // low, medium, high, critical
  message     String
  currentPrice Decimal @db.Decimal(10, 2)
  previousPrice Decimal @db.Decimal(10, 2)
  changePercent Float
  validUntil  DateTime
  status      String   @default("active") // active, expired, acknowledged
  acknowledgedAt DateTime?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  @@map("market_alerts")
}

model FarmerVerification {
  id          String   @id @default(cuid())
  farmerId    String
  farmer      FarmerProfile @relation(fields: [farmerId], references: [id])
  verificationType String // kyc, land_verification, bank_verification
  status      String   @default("pending") // pending, verified, rejected
  verifiedAt  DateTime?
  verifiedBy  String?
  verificationData Json @default("{}") // verification details
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("farmer_verifications")
}

// ===== RBAC MODELS =====

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String[] // Array of permission strings
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       UserRole[]
  
  @@map("roles")
}

model UserRole {
  id       String @id @default(cuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId   String
  role     Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  assignedAt DateTime @default(now())
  assignedBy String? // User ID who assigned the role
  
  @@unique([userId, roleId])
  @@map("user_roles")
}

// ===== REAL-TIME FEATURES MODELS =====

model WebSocketConnection {
  id          String   @id @default(cuid())
  userId      String?
  sessionId   String
  isActive    Boolean  @default(true)
  connectedAt DateTime @default(now())
  lastPing    DateTime @default(now())
  metadata    Json?
  organizationId String?
  user        User?    @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])
  
  @@map("websocket_connections")
}

model RealTimeEvent {
  id          String   @id @default(cuid())
  type        String
  data        Json
  userId      String?
  organizationId String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  user        User?    @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])
  
  @@map("realtime_events")
}

model PushSubscription {
  id          String   @id @default(cuid())
  userId      String
  organizationId String?
  endpoint    String
  p256dh      String
  auth        String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])
  
  @@map("push_subscriptions")
}

// ===== PAYMENT MODELS =====

model Payment {
  id              String   @id @default(cuid())
  razorpayOrderId String
  razorpayPaymentId String?
  amount          Decimal
  currency        String   @default("INR")
  status          PaymentStatus @default(PENDING)
  farmerId        String?
  organizationId  String
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  farmer          FarmerProfile? @relation(fields: [farmerId], references: [id])
  organization    Organization @relation(fields: [organizationId], references: [id])
  refunds         Refund[]
  
  @@map("payments")
}


model Subscription {
  id              String   @id @default(cuid())
  farmerId        String
  organizationId  String
  planId          String
  status          SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  farmer          FarmerProfile @relation(fields: [farmerId], references: [id])
  organization    Organization @relation(fields: [organizationId], references: [id])
  
  @@map("subscriptions")
}

// ===== NOTIFICATION MODELS =====

model NotificationPreference {
  id              String   @id @default(cuid())
  userId          String
  organizationId  String?
  channel         NotificationChannel
  isEnabled       Boolean  @default(true)
  frequency       NotificationFrequency @default(IMMEDIATE)
  quietHoursStart String?
  quietHoursEnd   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  organization    Organization? @relation(fields: [organizationId], references: [id])
  
  @@map("notification_preferences")
}

model NotificationTemplate {
  id          String   @id @default(cuid())
  name        String
  channel     NotificationChannel
  subject     String?
  body        String
  variables   Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("notification_templates")
}

model NotificationHistory {
  id          String   @id @default(cuid())
  userId      String?
  channel     NotificationChannel
  type        String
  subject     String?
  body        String
  status      NotificationStatus @default(PENDING)
  sentAt      DateTime?
  errorMessage String?
  metadata    Json?
  createdAt   DateTime @default(now())
  
  @@map("notification_history")
}

// ===== ENUMS =====

enum PaymentStatus {
  PENDING
  CAPTURED
  FAILED
  CANCELLED
}

enum RefundStatus {
  PENDING
  PROCESSED
  FAILED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum NotificationFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
  MONTHLY
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
}

// ===== OBSERVABILITY MODELS =====

model Alert {
  id          String   @id @default(cuid())
  ruleId      String
  name        String
  description String
  severity    String   // critical, warning, info
  condition   String
  status      String   // active, resolved, acknowledged
  triggeredAt DateTime
  resolvedAt  DateTime?
  acknowledgedAt DateTime?
  acknowledgedBy String?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("alerts")
}

model PerformanceMetric {
  id          String   @id @default(cuid())
  organizationId String?
  timestamp   DateTime
  responseTime Float
  throughput  Float
  errorRate   Float
  cpuUsage    Float
  memoryUsage Float
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  @@map("performance_metrics")
}

model ApiLog {
  id          String   @id @default(cuid())
  organizationId String?
  method      String
  route       String
  statusCode  Int
  responseTime Float
  userAgent   String?
  ipAddress   String?
  userId      String?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  @@map("api_logs")
}

// ===== MULTI-TENANCY MODELS =====

model TenantConfig {
  id          String   @id @default(cuid())
  organizationId String @unique
  organization Organization @relation(fields: [organizationId], references: [id])
  isolationMode String @default("schema") // schema, database, table
  customConfig Json    @default("{}")
  features    Json     @default("{}")
  limits      Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("tenant_configs")
}

model TenantBackup {
  id          String   @id @default(cuid())
  tenantId    String
  backupType  String   // migration, scheduled, manual
  data        Json
  status      String   // pending, completed, failed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("tenant_backups")
}

model TenantMigration {
  id          String   @id @default(cuid())
  tenantId    String
  fromMode    String   // source isolation mode
  toMode      String   // target isolation mode
  status      String   // pending, in_progress, completed, failed
  startedAt   DateTime?
  completedAt DateTime?
  errorMessage String?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("tenant_migrations")
}

// ===== BACKUP & RECOVERY MODELS =====

model BackupRecord {
  id          String   @id @default(cuid())
  type        String   // full, incremental, tenant
  status      String   // in_progress, completed, failed
  startTime   DateTime
  endTime     DateTime?
  size        Int?     // bytes
  manifest    Json?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  restores    RestoreRecord[]
  @@map("backup_records")
}

model RestoreRecord {
  id          String   @id @default(cuid())
  backupId    String
  backup      BackupRecord @relation(fields: [backupId], references: [id])
  status      String   // in_progress, completed, failed
  startTime   DateTime
  endTime     DateTime?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("restore_records")
}

// ===== CLIENT ONBOARDING MODELS =====

model OnboardingSession {
  id                String   @id @default(cuid())
  clientId          String
  client            Organization @relation(fields: [clientId], references: [id], onDelete: Cascade)
  templateId        String
  status            String   // pending, in_progress, completed, failed
  currentStep       Int      @default(1)
  totalSteps        Int
  progress          Int      @default(0)
  startedAt         DateTime @default(now())
  completedAt       DateTime?
  estimatedCompletion DateTime?
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("onboarding_sessions")
}

model FarmerAssociation {
  id            String   @id @default(cuid())
  name          String
  region        String
  description   String?
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  farmers       FarmerProfile[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("farmer_associations")
}

model CropType {
  id            String   @id @default(cuid())
  name          String
  type          String   // cereal, cash_crop, vegetable, fruit
  season        String   // kharif, rabi, year_round
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  crops         Crop[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("crop_types")
}

model WeatherConfig {
  id              String   @id @default(cuid())
  region          String
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  alertThresholds Json     @default("{}")
  enabled         Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("weather_configs")
}

model MarketConfig {
  id              String   @id @default(cuid())
  commodity       String
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  monitoringEnabled Boolean @default(true)
  alertThresholds Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("market_configs")
}

model VoiceConfig {
  id            String   @id @default(cuid())
  language      String
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  enabled       Boolean  @default(true)
  commands      Json     @default("[]")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("voice_configs")
}

model PaymentConfig {
  id            String   @id @default(cuid())
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  provider      String   // razorpay, stripe, paypal
  enabled       Boolean  @default(true)
  config        Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("payment_configs")
}

model NotificationConfig {
  id            String   @id @default(cuid())
  type          String   // sms, email, push
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  enabled       Boolean  @default(true)
  provider      String
  config        Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("notification_configs")
}

model ProductCategory {
  id            String   @id @default(cuid())
  name          String
  description   String?
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  products      Product[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("product_categories")
}

model Sale {
  id            String   @id @default(cuid())
  storeId       String
  store         Store @relation(fields: [storeId], references: [id])
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  customerId    String?
  customer      Customer? @relation(fields: [customerId], references: [id])
  staffId       String?
  staff         Staff? @relation(fields: [staffId], references: [id])
  totalAmount   Decimal
  discount      Decimal  @default(0)
  tax           Decimal  @default(0)
  paymentMethod String
  status        String   @default("completed") // pending, completed, refunded
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("sales")
}

model Staff {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  phone         String?
  storeId       String
  store         Store @relation(fields: [storeId], references: [id])
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role          String
  status        String   @default("active") // active, inactive, terminated
  sales         Sale[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("staff")
}

model StaffRole {
  id            String   @id @default(cuid())
  name          String
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  permissions   Json     @default("[]")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("staff_roles")
}

model PosConfig {
  id            String   @id @default(cuid())
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  provider      String
  enabled       Boolean  @default(true)
  config        Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("pos_configs")
}

model CustomerConfig {
  id            String   @id @default(cuid())
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  loyaltyProgram Boolean @default(false)
  customerSegmentation Boolean @default(false)
  marketingAutomation Boolean @default(false)
  config        Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("customer_configs")
}

model AnalyticsConfig {
  id            String   @id @default(cuid())
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  enabled       Boolean  @default(true)
  config        Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("analytics_configs")
}

// ===== PRODUCTION MONITORING MODELS =====

model GrafanaDashboard {
  id            String   @id @default(cuid())
  key           String   @unique
  title         String
  panels        Json     @default("[]")
  organizationId String?
  organization  Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("grafana_dashboards")
}

model AlertRule {
  id            String   @id @default(cuid())
  name          String   @unique
  condition     String
  severity      String   // critical, warning, info
  message       String
  duration      String
  organizationId String?
  organization  Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("alert_rules")
}

model NotificationChannelConfig {
  id            String   @id @default(cuid())
  name          String   @unique
  type          String   // email, slack, sms, webhook
  config        Json     @default("{}")
  organizationId String?
  organization  Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("notification_channel_configs")
}

model BusinessMetric {
  id            String   @id @default(cuid())
  metric        String
  value         Float
  timestamp     DateTime @default(now())
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  
  @@map("business_metrics")
}

model Asset {
  id            String   @id @default(cuid())
  kind          String   // 'saree', 'product', etc.
  status        String   @default("ingested") // 'ingested', 'processing', 'completed', 'failed'
  urls          Json     @default("{}") // { source: string, tryon: string[], video: string, depth: string, normals: string }
  meta          Json     @default("{}") // { provider: string, jobId: string, avatarSpec: {}, etc. }
  organizationId String?
  organization  Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("assets")
}
